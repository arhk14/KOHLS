<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="perf env" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="base_url" elementType="Argument">
            <stringProp name="Argument.name">base_url</stringProp>
            <stringProp name="Argument.value">internal-perf.nextuple.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="base_path" elementType="Argument">
            <stringProp name="Argument.name">base_path</stringProp>
            <stringProp name="Argument.value">services/ctr-enabler-service/ctr/mock/publishEvent</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="base_dir" elementType="Argument">
            <stringProp name="Argument.name">base_dir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir().trim();)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tpm" elementType="Argument">
            <stringProp name="Argument.name">tpm</stringProp>
            <stringProp name="Argument.value">${__P(tpm, 1800)}	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads, 1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampUp, 1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration, 3600)}</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${tpm}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="KOHLS_TLOG Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${api-key}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">EVENT_TYPE</stringProp>
                <stringProp name="Header.value">KOHLS_TLOG</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="KOHLS_TLOG" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;orderLog&quot;: {&#xd;
		&quot;orderHeader&quot;: {&#xd;
			&quot;transaction&quot;: {&#xd;
				&quot;transactionType&quot;: &quot;Return&quot;,&#xd;
				&quot;sellerOrganization&quot;: &quot;KOHLS&quot;,&#xd;
				&quot;channel&quot;: &quot;KOHLS_ONLINE&quot;,&#xd;
				&quot;storeID&quot;: &quot;${__Random(10,99,)}&quot;,&#xd;
				&quot;registerID&quot;: &quot;1&quot;,&#xd;
				&quot;orderNumber&quot;: &quot;${__Random(10000000,99999999,)}&quot;, &#xd;
				&quot;ccFirstTimeDiscountClaimed&quot;: &quot;N&quot;,&#xd;
				&quot;transactionDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX)}&quot;,&#xd;
				&quot;fulfillmentType&quot;: &quot;PICKUP&quot;,&#xd;
				&quot;biRewardsOffline&quot;: &quot;true&quot;&#xd;
			},&#xd;
			&quot;userIdentifiers&quot;: {&#xd;
				&quot;loyaltyID&quot;: &quot;${__Random(1000000000000000,9999999999999999,)}&quot;&#xd;
			},&#xd;
			&quot;locale&quot;: {&#xd;
				&quot;languageCountry&quot;: &quot;en_us&quot;&#xd;
			}&#xd;
		},&#xd;
		&quot;orderDetail&quot;: {&#xd;
			&quot;orderLines&quot;: {&#xd;
				&quot;saleOrderLines&quot;: {&#xd;
					&quot;orderLine&quot;: [{&#xd;
						&quot;item&quot;: {&#xd;
							&quot;upc&quot;: &quot;${__Random(1000000000000,9999999999999,)}&quot;,&#xd;
							&quot;isReward&quot;: &quot;false&quot;&#xd;
						},&#xd;
						&quot;linePriceInfo&quot;: {&#xd;
							&quot;unitListPrice&quot;: &quot;34.00&quot;,&#xd;
							&quot;actualSalesUnitPrice&quot;: &quot;20.00&quot;,&#xd;
							&quot;lineTotal&quot;: &quot;20.00&quot;&#xd;
						},&#xd;
						&quot;lineDiscounts&quot;: {&#xd;
							&quot;lineDiscount&quot;: [{&#xd;
								&quot;promoID&quot;: &quot;SephoraAtKohlsPromoMultiplier&quot;,&#xd;
								&quot;couponId&quot;: &quot;${couponId}&quot;,&#xd;
								&quot;discountCode&quot;: &quot;SephoraAtKohlsPromoMultiplier&quot;,&#xd;
								&quot;discountAmount&quot;: &quot;5.00&quot;&#xd;
							}]&#xd;
						},&#xd;
						&quot;lineNo&quot;: &quot;2&quot;,&#xd;
						&quot;orderedQty&quot;: &quot;1&quot;,&#xd;
						&quot;fulfillmentType&quot;: &quot;PICKUP&quot;&#xd;
					}]&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${base_path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config_couponId" enabled="true">
              <stringProp name="filename">${base_dir}/data/couponId.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">couponId</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Customer CSV Data Set Config" enabled="false">
              <stringProp name="delimiter">;</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${base_directory}/customer-data.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">FirstName,LastName,StreetAddress,ZipCode,City,State,PhoneNumber,Email,Company,Jobtitle,URL,Country</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Order CSV Data Set Config" enabled="false">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${base_dir}/data/order-ids.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">OrderNo</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Random Data Generator" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def generator = { String alphabet, int n -&gt;
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
vars.put(&quot;PersonID&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 9 ))
vars.put(&quot;PersonInfoKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;OrderLineScheduleKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;OrderReleaseStatusKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;ShipmentKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;ShipmentLineKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;ShipmentContainerKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;OrderHeaderKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;OrderLineKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;ShipToKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;InvoiceNo&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 10 ))
vars.put(&quot;OrderInvoiceDetailKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;OrderInvoiceKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;ExtnCRMID&quot;,&quot;EXTN&quot;+vars.get(&quot;OrderNo&quot;))
vars.put(&quot;TrackingNo&quot;,generator( ( (&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;) ).join(), 20 ))
vars.put(&quot;UniqueId&quot;,vars.get(&quot;OrderNo&quot;)+&quot;-SEPHORADOTCOM-&quot;+&quot;0001&quot;)
vars.put(&quot;uniqueShipmentId&quot;,vars.get(&quot;ShipmentNo&quot;)+&quot;-SEPHORADOTCOM-&quot;+&quot;SHIPNODE&quot;)
//vars.put(&quot;sessionId&quot;,generator( ( (&apos;a&apos;..&apos;z&apos;)+(&apos;0&apos;..&apos;9&apos;) ).join(), 15 ))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="KOHLS_ONLINE Throughput Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="kohls online" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">${api-key}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">EVENT_TYPE</stringProp>
                <stringProp name="Header.value">KOHLS_ORDER</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="kohls online" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;orderLog&quot;: {&#xd;
        &quot;orderHeader&quot;: {&#xd;
            &quot;transaction&quot;: {&#xd;
                &quot;transactionType&quot;: &quot;Sale&quot;,&#xd;
                &quot;sellerOrganization&quot;: &quot;KOHLS&quot;,&#xd;
                &quot;channel&quot;: &quot;KOHLS_ONLINE&quot;,&#xd;
                &quot;storeID&quot;: &quot;${__Random(10,99,)}&quot;,&#xd;
                &quot;registerID&quot;: &quot;1&quot;,&#xd;
                &quot;orderNumber&quot;: &quot;${__Random(1000000000,9999999999,)}&quot;,&#xd;
                &quot;ccFirstTimeDiscountClaimed&quot;: &quot;N&quot;,&#xd;
                &quot;transactionDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX)}&quot;,&#xd;
                &quot;fulfillmentType&quot;: &quot;SHIPTOHOME&quot;,&#xd;
                &quot;biRewardsOffline&quot;: &quot;true&quot;&#xd;
            },&#xd;
            &quot;userIdentifiers&quot;: {&#xd;
                &quot;loyaltyID&quot;: &quot;${__Random(1000000000000000,9999999999999999,)}&quot;&#xd;
            },&#xd;
            &quot;locale&quot;: {&#xd;
                &quot;languageCountry&quot;: &quot;en_us&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;orderDetail&quot;: {&#xd;
            &quot;orderLines&quot;: {&#xd;
                &quot;saleOrderLines&quot;: {&#xd;
                    &quot;orderLine&quot;: [&#xd;
                        {&#xd;
                            &quot;item&quot;: {&#xd;
                                &quot;upc&quot;: &quot;${__Random(1000000000000,9999999999999,)}&quot;,&#xd;
                                &quot;isReward&quot;: &quot;false&quot;&#xd;
                            },&#xd;
                            &quot;linePriceInfo&quot;: {&#xd;
                                &quot;unitListPrice&quot;: &quot;34.00&quot;,&#xd;
                                &quot;actualSalesUnitPrice&quot;: &quot;20.00&quot;,&#xd;
                                &quot;lineTotal&quot;: &quot;20.00&quot;&#xd;
                            },&#xd;
                            &quot;lineDiscounts&quot;: {&#xd;
                                &quot;lineDiscount&quot;: [&#xd;
                                    {&#xd;
                                        &quot;promoID&quot;: &quot;SephoraAtKohlsPromoMultiplier&quot;,&#xd;
                                        &quot;couponId&quot;: &quot;${couponId}&quot;,&#xd;
                                        &quot;discountCode&quot;: &quot;SephoraAtKohlsPromoMultiplier&quot;,&#xd;
                                        &quot;discountAmount&quot;: &quot;5.00&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            },&#xd;
                            &quot;lineNo&quot;: &quot;1&quot;,&#xd;
                            &quot;orderedQty&quot;: &quot;1&quot;,&#xd;
                            &quot;fulfillmentType&quot;: &quot;SHIPTOHOME&quot;&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;item&quot;: {&#xd;
                                &quot;upc&quot;: &quot;${__Random(100000000000,999999999999,)}&quot;,&#xd;
                                &quot;isReward&quot;: &quot;false&quot;&#xd;
                            },&#xd;
                            &quot;linePriceInfo&quot;: {&#xd;
                                &quot;unitListPrice&quot;: &quot;34.00&quot;,&#xd;
                                &quot;actualSalesUnitPrice&quot;: &quot;24.00&quot;,&#xd;
                                &quot;lineTotal&quot;: &quot;24.00&quot;&#xd;
                            },&#xd;
                            &quot;lineDiscounts&quot;: {&#xd;
                                &quot;lineDiscount&quot;: [&#xd;
                                    {&#xd;
                                        &quot;promoID&quot;: &quot;SephoraAtKohlsPromoMultiplier&quot;,&#xd;
                                        &quot;couponId&quot;: &quot;${couponId}&quot;,&#xd;
                                        &quot;discountCode&quot;: &quot;SephoraAtKohlsPromoMultiplier&quot;,&#xd;
                                        &quot;discountAmount&quot;: &quot;5.00&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            },&#xd;
                            &quot;lineNo&quot;: &quot;2&quot;,&#xd;
                            &quot;orderedQty&quot;: &quot;1&quot;,&#xd;
                            &quot;fulfillmentType&quot;: &quot;SHIPTOHOME&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${base_path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config_couponId" enabled="true">
              <stringProp name="filename">${base_dir}/data/couponId.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">couponId</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Customer CSV Data Set Config" enabled="false">
              <stringProp name="delimiter">;</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${base_directory}/customer-data.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">FirstName,LastName,StreetAddress,ZipCode,City,State,PhoneNumber,Email,Company,Jobtitle,URL,Country</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Order CSV Data Set Config" enabled="false">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${base_dir}/data/order-ids.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">OrderNo</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Random Data Generator" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def generator = { String alphabet, int n -&gt;
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
vars.put(&quot;PersonID&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 9 ))
vars.put(&quot;PersonInfoKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;OrderLineScheduleKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;OrderReleaseStatusKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;ShipmentKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;ShipmentLineKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;ShipmentContainerKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;OrderHeaderKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;OrderLineKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;ShipToKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;InvoiceNo&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 10 ))
vars.put(&quot;OrderInvoiceDetailKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;OrderInvoiceKey&quot;,generator( ( (&apos;0&apos;..&apos;9&apos;) ).join(), 24 ))
vars.put(&quot;ExtnCRMID&quot;,&quot;EXTN&quot;+vars.get(&quot;OrderNo&quot;))
vars.put(&quot;TrackingNo&quot;,generator( ( (&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;) ).join(), 20 ))
vars.put(&quot;UniqueId&quot;,vars.get(&quot;OrderNo&quot;)+&quot;-SEPHORADOTCOM-&quot;+&quot;0001&quot;)
vars.put(&quot;uniqueShipmentId&quot;,vars.get(&quot;ShipmentNo&quot;)+&quot;-SEPHORADOTCOM-&quot;+&quot;SHIPNODE&quot;)
//vars.put(&quot;sessionId&quot;,generator( ( (&apos;a&apos;..&apos;z&apos;)+(&apos;0&apos;..&apos;9&apos;) ).join(), 15 ))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
